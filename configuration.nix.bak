# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      # ./boot.nix
      # ./desktop.nix
      # ./fonts.nix
      # ./networking.nix
      # ./packages.nix
      # ./r-config.nix
      # ./services.nix
    ];



  #------- [ BOOT OPTIONS ] -------#
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.grub = {
    enable = true;
    device = "nodev";
    efiSupport = true;
    useOSProber = true;
  };
  boot.tmp = {
    cleanOnBoot = true;
    useTmpfs = true;
  };



	#------- [ DESKTOP / MAIN ] -------#
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.kyle = {
    isNormalUser = true;
    description = "Kyle";
    extraGroups = [ "networkmanager" "wheel" ];
    packages = with pkgs; [
    #  thunderbird
    ];
  };

  # Install firefox.
  programs.firefox.enable = true;

  # Set your time zone.
  time.timeZone = "America/Chicago";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";

  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;

  # Enable the GNOME Desktop Environment.
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;

  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };


  
  #------- [ SET UP EXTERNALS ] -------#
  # For Magic Trackpad bluetooth
  hardware.bluetooth = {
    enable = true;
    powerOnBoot = true;
  };
  
  # ZSA Voyager keyboard support
  hardware.keyboard.zsa.enable = true;



	#------- [ NETWORKING ] -------#
  services.openssh.enable = true;
  
  networking = {
    hostName = "nixos";
    networkmanager.enable = true;
    
    # Firewall configuration for Tailscale:
    firewall = {
      enable = true;                         # keep firewall enabled for security
      checkReversePath = "loose";            # Required for subnet routing
      trustedInterfaces = [ "tailscale0" ];  # Trust the Tailscale interface
    };

    # Tailnet IP addresses for Raspberry Pi devices
    extraHosts = ''
      100.125.173.109 pi5
      100.108.174.90  pi4
    '';
  };
  
  services.tailscale = {
    enable = true;
    useRoutingFeatures = "client";           # Allow using exit nodes
  };
  


  #------- [ MOUNTING piCloud SHARED DRIVE OVER TAILNET ] -------#
  # Create mount point directory:
  systemd.tmpfiles.rules = [
    "d /home/kyle/piCloud 0755 kyle users -"
  ];
  
  # Mount piCloud over CIFS/SMB:
  fileSystems."/home/kyle/piCloud" = {
    device = "//100.125.173.109/piCloud";
    fsType = "cifs";
    options = [
      "credentials=/etc/nixos/smb-secrets"
      "uid=1000"
      "gid=1000"
      "vers=3.0"
      "nofail"                             # Don't fail boot if mount fails
      "_netdev"                            # Mark as a network device
      "x-systemd.automount"                # Automount on access
      "x-systemd.requires=tailscaled.service"
      "x-systemd.requires=network-online.target"

      # timing delays to prevent boot or shutdown hanging:
      "x-systemd.idle-timeout=300"         # 5 minutes of inactivity
      "x-systemd.device-timeout=5s"
      "x-systemd.mount-timeout=5s"
    ];
  };

  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.



  #------- [ PACKAGES ] -------#
  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # Import unstable channel
  nixpkgs.config.packageOverrides = pkgs: {
    unstable = import <nixos-unstable> { config = pkgs.config; };
  };
    
  # List packages installed in system profile
  environment.systemPackages = with pkgs; [
    # Terminal essentials
    bash-completion
    btop
    cifs-utils
    cmake
    curl
    gcc
    git
    htop
    micro
    neofetch
    networkmanager
    nmap
    nix-prefetch-git
    openssl
    python3Full
    python312Packages.pip
    rsync
    samba
    stow
    tldr
    tree
    unzip
    wget
    xclip

    # Desktop applications
    ardour
    brave
    calibre
    discord
    gedit
    gimp3-with-plugins
    github-desktop
    gparted
    kitty
    libreoffice
    nextcloud-client
    obs-studio
    positron-bin
    slack
    spotify
    thunderbird
    vlc
    zoom-us

    # Development tools for R package compilation
    gfortran
    gnumake
    pkg-config
    
    # System libraries that R packages commonly need
    fontconfig
    freetype
    cairo
    harfbuzz
    libxml2
    openssl
    curl
    sqlite
    zlib
    bzip2
    xz
    readline
    ncurses
    
    # Math libraries
    blas
    lapack
    openblas
    gmp
    mpfr
    
    # Graphics libraries
    libjpeg
    libpng
    libtiff
    
    # System tools
    adwaita-icon-theme
    flatpak
    nodejs
    os-prober
    pandoc
    unstable.quarto  # Get latest Quarto from unstable
    tailscale

    # Input device tools
    keymapp     # For ZSA Voyager configuration
    libinput    # For trackpad debugging
    solaar      # For Logitech devices 
  ];



  #------- [ R CONFIGURATION ] -------#
  # Import unstable channel for R 4.5.x
  nixpkgs.config.packageOverrides = pkgs: {
    unstable = import <nixos-unstable> { config = pkgs.config; };
  };
        
  environment.systemPackages = with pkgs; [
    # R 4.5.x from unstable (no wrapper - just pure R)
    unstable.R
    
    # Complete compiler toolchain
    gcc
    gfortran
    gnumake
    cmake
    pkg-config
    
    # Core development libraries for R package compilation
    # Essential libraries:
    libxml2
    libxml2.dev
    openssl
    openssl.dev
    curl
    curl.dev
    sqlite
    zlib
    zlib.dev
    
    # For graphics and fonts (ggplot2, etc):
    cairo
    cairo.dev
    freetype
    freetype.dev
    fontconfig
    fontconfig.dev
    harfbuzz
    harfbuzz.dev
    libjpeg
    libpng
    libtiff
    
    # Math and stats libraries:
    blas
    lapack
    openblas
    gmp
    mpfr
    
    # For data processing:
    bzip2
    xz
    
    # Network and security:
    libsodium
    
    # For system integration:
    readline
    ncurses
    
    # Git integration for remotes:: functions:
    git
    
    # Additional tools R packages might need:
    which
    pandoc
    
    # X11 support (if needed for graphics):
    xorg.libX11
    xorg.libXt
  ];
        
  # Ensure R can find libraries properly
  environment.variables = {
    R_LIBS_USER = "$HOME/R/x86_64-pc-linux-gnu-library/4.5";
    # Manual paths for packages that don't have pkg-config
    CPPFLAGS = "-I${pkgs.zlib}/include -I${pkgs.openssl}/include -I${pkgs.curl}/include -I${pkgs.fontconfig}/include";
    LDFLAGS = "-L${pkgs.zlib}/lib -L${pkgs.openssl}/lib -L${pkgs.curl}/lib -L${pkgs.fontconfig}/lib";
  };

  # Create user R library directory automatically
  systemd.tmpfiles.rules = [
    "d /home/kyle/R 0755 kyle users -"
    "d /home/kyle/R/x86_64-pc-linux-gnu-library 0755 kyle users -" 
    "d /home/kyle/R/x86_64-pc-linux-gnu-library/4.5 0755 kyle users -"
  ];



  #------- [ SERVICES ] -------#
  programs.ssh.startAgent = true;
            
  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };
          
  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  services.flatpak.enable = true;



  #------- [ FONT SETTINGS ] -------#
  fonts = {
    packages = with pkgs; [
      noto-fonts
      noto-fonts-cjk-sans
      noto-fonts-emoji
      font-awesome
      fira-code
#      (nerdfonts.override { fonts = [ "FiraCode" "DroidSansMono" "Meslo" ]; })
    ];
    
    fontconfig = {
      enable = true;
      defaultFonts = {
        monospace = [ "FiraCode Nerd Font" "Fira Code" ];
        serif = [ "Noto Serif" ];
        sansSerif = [ "Noto Sans" ];
      };
    };
  };

  nix.settings.auto-optimise-store = true;

  system.stateVersion = "25.05";

}
